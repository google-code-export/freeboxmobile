#summary Quelques guides pour le code de FreeboxMobile
#labels Phase-Implementation

= Quelques guides / règles pour le code de !FreeboxMobile =

== Structure des dossiers & fichiers==
Pour chaque module (Mevo, Pvr...) il doit exister un dossier pour ses sources : src/org/madprod/freeboxmovile/mvv/ par exemple.
 * dans le dossier : le nom des activity est du type !HomeActivity.java / !MevoActivity.java...
 * si besoin, le nom du fichier de la classe qui gère la bdd est du type : !MevoDbAdapter.java
 * si besoin, le nom du fichier de l'interface qui contient les constantes : !MevoConstants.java (l'interface doit *extends Constants*)
Un dossier pour les strings existe (toujours définir les strings dans un xml) dans res/values/ <br>
Définir un fichier par module : res/values/strings_mevo.xml par exemple
----
== Dans le code==
=== Utiliser la connexion à la console de Free===
 * dans le onCreate de chaque Activity, appeler impérativement : 
   * *!FBMHttpConnection.initVars(this, null);*
 * dans le onDestroy de chaque Activity, appeler impérativement :
   * *!FBMHttpConnection.closeDisplay();*
===Gérer le multicomptes===
 * Les utilisateurs peuvent utiliser !FreeboxMobile sur plusieurs comptes Freebox. Toutefois, un seul compte est actif à un moment donné. Ils peuvent modifier le compte actif à partir du menu dans la page d'accueil de !FreeboxMobile.
 * Pour connaître le compte actif (au démarrage d'un module par exemple), utiliser * !HttpConnection.getIdentifiant() *
 * Si les données d'une base de données sont dépendantes du compte utilisateur (les messages de la messagerie vocale par exemple), utiliser l'identifiant du compte (et non le titre qui lui peut changer facilement) dans le nom de la base. Exemple : * DATABASE_NAME+"__"+!HttpConnection.getIdentifiant() * (exemple dans !MevoDbAdapter.java).
 * Pour obtenir le titre du compte (afin de renseigner l'utilisateur du nom du compte actif, dans la barre de titre par exemple), utiliser : * !HttpConnection.getTitle() * (exemple dans MevoActivity).
 * Si des préférences sont dépendantes du compte utilisateur, utiliser * getSharedPreferences(KEY_PREFS+"__"+HttpConnection.getIdentifiant(), MODE_PRIVATE) * en lieu et place de * getSharedPreferences(KEY_PREFS, MODE_PRIVATE) *
===Les Logs===
Vous connaissez surement Log.d, Log.e, etc...<br/>
Vous pouvez utiliser *FBMHttpConnection.FBMLog(String)* pour générer automatiquement à la fois un log sur la sortie debug (équivalent au *Log.d*) + un log qui est stocké et que l'utilisateur peut envoyer par email en cas de pb (touche menu sur la home).
----
== Thèmes ==
Dans un soucis d'homogénéisation de l'interface, les différentes Activity doivent avoir pour thème *@android:style/Theme.Light.!NoTitleBar* ou *@android:style/Theme.Light* (dans le Manifest, Application Nodes -> Activity en question -> Theme)
----
== Widgets / Layouts ==
Pour une meilleure visualisation de l'application sur les différentes tailles d'écran, il faut toujours indiquer les dimensions en dip et non en px.<br />
Sur un HTC Dream ou Magic 1dip = 1px mais sur d'autres tailles d'écran, Android redimensionne correctement si les tailles sont indiquées en dip.
----
==Bugs==
Lors de la publication de bugs (ou Issues), choisir le label *Module-nommodule* correspondant à au module sur lequel le bug est reporté.
----
==Commit==
Lors des commit, préciser dans le message à quel(s) Issue(s) le commit participe (ou corrige).

Exemple pour simplement mettre un lien vers l'issue dans le log svn :
{{{
[ issue 16 ] : bug correction (timer at boot)
[ issue 20 ] : implémentation ok (merci à YodanC !)
}}}

Résultat visible ici :
http://code.google.com/p/freeboxmobile/source/detail?r=81

Exemple pour marquer l'issue comme "Fixed" automatiquement (et faire le lien automatique dans l'issue vers le commit) :
{{{
 Fixes issue 81
}}}

Résultat visible ici :
http://code.google.com/p/freeboxmobile/issues/detail?id=81